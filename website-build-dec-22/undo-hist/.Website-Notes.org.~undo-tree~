(undo-tree-save-format-version . 1)
"109180985b9d185448ff492384ec63b8abf922ba"
[nil nil nil nil (25465 59696 437523 978000) 0 nil]
([nil nil ((nil rear-nonsticky nil 322 . 323) (nil fontified nil 101 . 323) (101 . 323) (t 25465 59099 842557 846000)) nil (25465 59696 437519 798000) 0 nil])
([nil nil ((#("3" 0 1 (foreign-selection STRING fontified t)) . 198) (t 25465 59696 451258 631000)) nil (25465 59711 716832 450000) 0 nil])
([nil nil ((198 . 199)) nil (25465 59711 716828 230000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id0 . 1) (undo-tree-id1 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id2 . 1) (#("n" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id3 . 1) (#("a" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id4 . 1) (#("n" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id5 . 1) (#("a" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id6 . 1) (t 25465 59711 731379 21000)) nil (25465 62473 639304 933000) 0 nil])
([nil nil ((93 . 105)) nil (25465 62473 639290 253000) 0 nil])
([nil nil ((93 . 104) (t 25465 62473 653344 592000)) nil (25465 62515 527841 628000) 0 nil])
([nil nil ((#("resourceDir = \"../resources\"" 0 11 (foreign-selection STRING fontified t face font-lock-variable-name-face) 11 14 (foreign-selection STRING fontified t) 14 28 (foreign-selection STRING fontified t face font-lock-string-face)) . 118) (undo-tree-id7 . -21) (undo-tree-id8 . -21) (undo-tree-id9 . -21) (undo-tree-id10 . -21) (undo-tree-id11 . -21) (undo-tree-id12 . -21) (undo-tree-id13 . -21) (undo-tree-id14 . -21) (undo-tree-id15 . -21) (undo-tree-id16 . -21) (undo-tree-id17 . -21) (undo-tree-id18 . -28)) nil (25465 62515 527839 208000) 0 nil])
([nil nil ((93 . 100) (t 25465 62515 541681 741000)) nil (25465 62862 707592 474000) 0 nil])
([nil nil ((100 . 101)) nil (25465 62862 707592 164000) 0 nil])
([nil nil ((106 . 114)) nil (25465 62862 707592 4000) 0 nil])
([nil nil ((116 . 117) (114 . 115) (114 . 115)) nil (25465 62862 707591 784000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -114) (undo-tree-id37 . -1) (undo-tree-id38 . 1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 115) nil (25465 62862 707591 234000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 116) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("n" 0 1 (fontified t)) . 116) (undo-tree-id23 . -1) (#("o" 0 1 (fontified t)) . 116) (#("i" 0 1 (fontified t)) . 116) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("t" 0 1 (fontified t)) . 116) (#("c" 0 1 (fontified t)) . 116) (#("u" 0 1 (fontified t)) . 116) (#("d" 0 1 (fontified t)) . 116) (#("o" 0 1 (fontified t)) . 116) (#("r" 0 1 (fontified t)) . 116) (#("t" 0 1 (fontified t)) . 116) (#("n" 0 1 (fontified t)) . 116) (#("i" 0 1 (fontified t)) . 116) (#("-" 0 1 (fontified t)) . 116) (#("e" 0 1 (fontified t)) . 116) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("m" 0 1 (fontified t)) . 116) (#("e" 0 1 (fontified t)) . 116) (#("h" 0 1 (fontified t)) . 116) (#("t" 0 1 (fontified t)) . 116)) nil (25465 62862 707587 454000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -93) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -94) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -95) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -96) (undo-tree-id51 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -97) (undo-tree-id52 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -98) (undo-tree-id53 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -99) (undo-tree-id54 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -100) (undo-tree-id55 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -101) (undo-tree-id56 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -102) (undo-tree-id57 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -103) (undo-tree-id58 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id59 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -105) (undo-tree-id60 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -106) (undo-tree-id61 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -107) (undo-tree-id62 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -108) (undo-tree-id63 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -109) (undo-tree-id64 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -110) (undo-tree-id65 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -111) (undo-tree-id66 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -112) (undo-tree-id67 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -113) (undo-tree-id68 . -1) 114 (t 25465 62862 720476 163000)) nil (25465 63663 872000 338000) 0 nil])
([nil nil ((93 . 101)) nil (25465 63663 871991 838000) 0 nil])
([nil nil ((101 . 115)) nil (25465 63663 871991 398000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-string-face)) . -114) (undo-tree-id41 . -1) 115) nil (25465 63663 871990 568000) 0 nil])
([nil nil ((114 . 121)) nil (25465 63663 871980 478000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-string-face)) . -100) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -101) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -102) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -103) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 105 (t 25465 63663 882899 975000)) nil (25465 63703 186667 36000) 0 nil])
([nil nil ((111 . 116)) nil (25465 63703 186644 166000) 0 nil])
([nil nil ((318 . 319) (t 25465 63703 199214 896000)) nil (25465 63964 810908 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 625 . 626) (nil fontified nil 319 . 626) (319 . 626)) nil (25465 63964 810904 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 349 . 350) (nil fontified nil 318 . 350) (318 . 350) (t 25465 63964 825310 345000)) nil (25465 63996 419975 699000) 0 nil])
([nil nil ((350 . 353)) nil (25465 63996 419972 259000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -329) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 330 (t 25465 63996 425563 440000)) nil (25465 64117 189689 185000) 0 nil])
([nil nil ((329 . 330) (#("]" 0 1 (foreign-selection STRING fontified nil)) . -329) (329 . 330)) nil (25465 64117 189687 775000) 0 nil])
([nil nil ((319 . 321) (#("[" 0 1 (foreign-selection STRING fontified nil)) . -319) (319 . 320)) nil (25465 64117 189687 365000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 320)) nil (25465 64117 189686 965000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -338) (undo-tree-id142 . -1) 339) nil (25465 64117 189686 655000) 0 nil])
([nil nil ((338 . 341)) nil (25465 64117 189685 905000) 0 nil])
([nil nil ((341 . 342) (#("\"" 0 1 (fontified nil)) . -341) (341 . 343) (#("\"" 0 1 (foreign-selection STRING fontified nil)) . -341) (341 . 342)) nil (25465 64117 189685 515000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -342) (undo-tree-id141 . -1) 343) nil (25465 64117 189684 955000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t face font-lock-string-face)) . -344) (undo-tree-id140 . -1) 345) nil (25465 64117 189684 5000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified t face font-lock-string-face)) . 342) (undo-tree-id139 . -1) 343) nil (25465 64117 189683 185000) 0 nil])
([nil nil ((352 . 353) (#("\"" 0 1 (fontified nil)) . -352) (352 . 353)) nil (25465 64117 189682 265000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -361) (undo-tree-id138 . -1) 362) nil (25465 64117 189681 705000) 0 nil])
([nil nil ((361 . 362) (#("]" 0 1 (foreign-selection STRING fontified nil)) . -361) (361 . 362)) nil (25465 64117 189680 595000) 0 nil])
([nil nil ((357 . 359) (#("[" 0 1 (fontified nil)) . -357) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (357 . 358)) nil (25465 64117 189679 905000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 358) (undo-tree-id135 . -1)) nil (25465 64117 189678 535000) 0 nil])
([nil nil ((365 . 367) (#("[" 0 1 (foreign-selection STRING fontified nil)) . -365) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (365 . 366)) nil (25465 64117 189677 715000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified nil)) . -364) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (371 . 372) (#("]" 0 1 (fontified t)) . -366) (undo-tree-id132 . -1)) nil (25465 64117 189675 975000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t face (font-lock-type-face))) . -369) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 370) nil (25465 64117 189668 165000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -379) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 380) nil (25465 64117 189666 25000) 0 nil])
([nil nil ((379 . 380)) nil (25465 64117 189656 665000) 0 nil])
([nil nil ((379 . 380)) nil (25465 64117 189652 815000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -408) (t 25465 64117 206529 896000) (409 . 410) (t 25465 64117 206529 896000)) nil (25465 64141 246844 931000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -422) (423 . 424)) nil (25465 64141 246844 641000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -434) (435 . 436)) nil (25465 64141 246844 451000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -448) (449 . 450)) nil (25465 64141 246844 161000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -462) (463 . 464)) nil (25465 64141 246843 971000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -481) (482 . 483)) nil (25465 64141 246843 771000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -493) (494 . 495)) nil (25465 64141 246843 411000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -507) (508 . 509)) nil (25465 64141 246843 201000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -520) (521 . 522)) nil (25465 64141 246843 1000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -539) (540 . 541)) nil (25465 64141 246842 781000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -551) (552 . 553)) nil (25465 64141 246842 561000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -566) (567 . 568)) nil (25465 64141 246842 281000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -581) (582 . 583)) nil (25465 64141 246842 101000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -601) (602 . 603)) nil (25465 64141 246841 911000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -613) (614 . 615)) nil (25465 64141 246841 721000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -626) (627 . 628)) nil (25465 64141 246841 531000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -639) (640 . 641)) nil (25465 64141 246841 151000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -662) (663 . 664)) nil (25465 64141 246840 911000) 0 nil])
([nil nil ((663 . 664)) nil (25465 64141 246840 591000) 0 nil])
([nil nil ((#(":" 0 1 (foreign-selection STRING fontified t)) . -394) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 395) nil (25465 64141 246840 31000) 0 nil])
([nil nil ((394 . 396)) nil (25465 64141 246828 931000) 0 nil])
([nil nil ((#("-" 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . 373) (t 25465 64141 266722 16000)) nil (25465 64191 21675 551000) 0 nil])
([nil nil ((#("-" 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . 428)) nil (25465 64191 21675 291000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified nil)) . -427) (#("  " 0 2 (foreign-selection STRING fontified nil)) . 426) (undo-tree-id152 . -2) (428 . 429)) nil (25465 64191 21675 1000) 0 nil])
([nil nil ((427 . 431)) nil (25465 64191 21674 171000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . 489) (undo-tree-id151 . -1) 490) nil (25465 64191 21673 891000) 0 nil])
([nil nil ((#("-" 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . -488) (undo-tree-id150 . -1) 489) nil (25465 64191 21673 101000) 0 nil])
([nil nil ((488 . 490)) nil (25465 64191 21672 371000) 0 nil])
([nil nil ((#("    " 0 4 (foreign-selection STRING fontified nil)) . 486) (undo-tree-id149 . -4) (490 . 491)) nil (25465 64191 21672 101000) 0 nil])
([nil nil ((487 . 491)) nil (25465 64191 21671 211000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified nil)) . -546) (#(" " 0 1 (foreign-selection STRING fontified nil)) . 545) (undo-tree-id148 . -1) (546 . 547)) nil (25465 64191 21670 751000) 0 nil])
([nil nil ((#("-" 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . 546)) nil (25465 64191 21669 741000) 0 nil])
([nil nil ((546 . 549)) nil (25465 64191 21669 521000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified t)) . -609)) nil (25465 64191 21669 311000) 0 nil])
([nil nil ((609 . 612)) nil (25465 64191 21669 111000) 0 nil])
([nil nil ((#("  " 0 2 (foreign-selection STRING fontified t)) . -610)) nil (25465 64191 21668 891000) 0 nil])
([nil nil ((#("-" 0 1 (foreign-selection STRING fontified t face font-lock-variable-name-face)) . 610)) nil (25465 64191 21668 631000) 0 nil])
([nil nil ((#(" " 0 1 (foreign-selection STRING fontified nil)) . -609) (#("  " 0 2 (foreign-selection STRING fontified nil)) . 608) (undo-tree-id147 . -2) (610 . 611)) nil (25465 64191 21667 791000) 0 nil])
([nil nil ((609 . 613)) nil (25465 64191 21656 541000) 0 nil])
([nil nil ((497 . 498) (#("\"" 0 1 (fontified nil)) . -497) (497 . 499) (#("\"" 0 1 (foreign-selection STRING fontified nil)) . -497) (497 . 498) (t 25465 64191 39119 422000)) nil (25465 64232 965048 306000) 0 nil])
([nil nil ((#("    " 0 4 (foreign-selection STRING fontified nil)) . -487) (502 . 503) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -498)) nil (25465 64232 965047 906000) 0 nil])
([nil nil ((554 . 555) (#("\"" 0 1 (fontified nil)) . -554) (554 . 556) (#("\"" 0 1 (foreign-selection STRING fontified nil)) . -554) (554 . 555)) nil (25465 64232 965047 486000) 0 nil])
([nil nil ((#("    " 0 3 (foreign-selection STRING fontified nil) 3 4 (foreign-selection STRING fontified nil)) . -544) (560 . 561) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -555)) nil (25465 64232 965047 16000) 0 nil])
([nil nil ((615 . 616) (#("\"" 0 1 (fontified nil)) . -615) (undo-tree-id160 . -1) (615 . 617) (#("\"" 0 1 (foreign-selection STRING fontified nil)) . -615) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (615 . 616)) nil (25465 64232 965046 466000) 0 nil])
([nil nil ((#("    " 0 4 (foreign-selection STRING fontified nil)) . -605) (619 . 620) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -616) (undo-tree-id153 . -1) (undo-tree-id154 . 1) (undo-tree-id155 . 1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1)) nil (25465 64232 965043 196000) 0 nil])
([nil nil ((639 . 640) (#("\"" 0 1 (fontified nil)) . -639) (undo-tree-id170 . -1) (639 . 641) (#("\"" 0 1 (foreign-selection STRING fontified nil)) . -639) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (639 . 640) (t 25465 64232 983454 320000)) nil (25465 64237 894313 406000) 0 nil])
([nil nil ((650 . 651) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -640) (undo-tree-id163 . -1) (undo-tree-id164 . 1) (undo-tree-id165 . 1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (25465 64237 894310 146000) 0 nil])
([nil nil ((318 . 320) (t 25465 64237 911493 668000)) nil (25465 64403 487042 900000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1624 . 1625) (nil fontified nil 319 . 1625) (319 . 1625)) nil (25465 64403 487042 440000) 0 nil])
([nil nil ((#("
[permalinks]
  post = \"/filename/\"
  
[menu]
[ nav]
   name = Home
    pre = home
    url= /
    weight= 1

    name= Blog
    pre= edit
    url= /post/
    weight= 2

name= \"Tags\"
    pre= tag
    url= /tags/
    weight= 3

name= \"About\"
    pre= smile
    url= /about/
    weight= 4

name= \"RSS\"
    pre= rss
    url= \"/index.xml\"
    weight=y 5
" 0 1 (foreign-selection STRING fontified t) 1 2 (fontified t) 2 12 (foreign-selection STRING fontified t face (font-lock-type-face font-lock-type-face)) 12 13 (fontified t) 13 14 (foreign-selection STRING fontified t) 14 16 (foreign-selection STRING fontified t) 16 20 (foreign-selection STRING fontified t face font-lock-variable-name-face) 20 23 (foreign-selection STRING fontified t) 23 24 (fontified t face font-lock-string-face) 24 33 (foreign-selection STRING fontified t face font-lock-string-face) 33 34 (foreign-selection STRING rear-nonsticky t fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face) 35 36 (fontified t) 36 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 44 (foreign-selection STRING fontified t face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face)) 44 45 (fontified t) 45 46 (foreign-selection STRING fontified t) 46 47 (fontified t) 47 51 (foreign-selection STRING fontified t face (font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face font-lock-type-face)) 51 52 (fontified t) 52 53 (foreign-selection STRING fontified t) 53 55 (foreign-selection STRING fontified t) 55 56 (foreign-selection STRING fontified t) 56 60 (foreign-selection STRING fontified t face font-lock-variable-name-face) 60 61 (foreign-selection STRING fontified t) 61 68 (foreign-selection STRING fontified t) 68 72 (foreign-selection STRING fontified t) 72 75 (foreign-selection STRING fontified t face font-lock-variable-name-face) 75 83 (foreign-selection STRING fontified t) 83 87 (foreign-selection STRING fontified t) 87 90 (foreign-selection STRING fontified t face font-lock-variable-name-face) 90 91 (fontified t) 91 94 (foreign-selection STRING fontified t) 94 98 (foreign-selection STRING fontified t) 98 104 (foreign-selection STRING fontified t face font-lock-variable-name-face) 104 105 (fontified t) 105 108 (foreign-selection STRING fontified t) 108 109 (foreign-selection STRING fontified t) 109 113 (foreign-selection STRING fontified t) 113 117 (foreign-selection STRING fontified t face font-lock-variable-name-face) 117 118 (fontified t) 118 124 (foreign-selection STRING fontified t) 124 128 (foreign-selection STRING fontified t) 128 131 (foreign-selection STRING fontified t face font-lock-variable-name-face) 131 132 (fontified t) 132 138 (foreign-selection STRING fontified t) 138 142 (foreign-selection STRING fontified t) 142 145 (foreign-selection STRING fontified t face font-lock-variable-name-face) 145 146 (fontified t) 146 154 (foreign-selection STRING fontified t) 154 158 (foreign-selection STRING fontified t) 158 164 (foreign-selection STRING fontified t face font-lock-variable-name-face) 164 165 (fontified t) 165 168 (foreign-selection STRING fontified t) 168 169 (foreign-selection STRING fontified t) 169 173 (foreign-selection STRING fontified t face font-lock-variable-name-face) 173 174 (fontified t) 174 175 (foreign-selection STRING fontified t) 175 176 (fontified t face font-lock-string-face) 176 180 (foreign-selection STRING fontified t face font-lock-string-face) 180 181 (fontified t face font-lock-string-face) 181 182 (foreign-selection STRING fontified t) 182 186 (foreign-selection STRING fontified t) 186 189 (foreign-selection STRING fontified t face font-lock-variable-name-face) 189 190 (fontified t) 190 195 (foreign-selection STRING fontified t) 195 199 (foreign-selection STRING fontified t) 199 202 (foreign-selection STRING fontified t face font-lock-variable-name-face) 202 203 (fontified t) 203 211 (foreign-selection STRING fontified t) 211 215 (foreign-selection STRING fontified t) 215 221 (foreign-selection STRING fontified t face font-lock-variable-name-face) 221 222 (fontified t) 222 225 (foreign-selection STRING fontified t) 225 226 (foreign-selection STRING fontified t) 226 230 (foreign-selection STRING fontified t face font-lock-variable-name-face) 230 231 (fontified t) 231 232 (foreign-selection STRING fontified t) 232 233 (fontified t face font-lock-string-face) 233 238 (foreign-selection STRING fontified t face font-lock-string-face) 238 239 (fontified t face font-lock-string-face) 239 240 (foreign-selection STRING fontified t) 240 244 (foreign-selection STRING fontified t) 244 247 (foreign-selection STRING fontified t face font-lock-variable-name-face) 247 248 (fontified t) 248 255 (foreign-selection STRING fontified t) 255 259 (foreign-selection STRING fontified t) 259 262 (foreign-selection STRING fontified t face font-lock-variable-name-face) 262 263 (fontified t) 263 272 (foreign-selection STRING fontified t) 272 276 (foreign-selection STRING fontified t) 276 282 (foreign-selection STRING fontified t face font-lock-variable-name-face) 282 283 (fontified t) 283 286 (foreign-selection STRING fontified t) 286 287 (foreign-selection STRING fontified t) 287 291 (foreign-selection STRING fontified t face font-lock-variable-name-face) 291 292 (fontified t) 292 293 (foreign-selection STRING fontified t) 293 294 (fontified t face font-lock-string-face) 294 297 (foreign-selection STRING fontified t face font-lock-string-face) 297 298 (fontified t face font-lock-string-face) 298 299 (foreign-selection STRING fontified t) 299 303 (foreign-selection STRING fontified t) 303 306 (foreign-selection STRING fontified t face font-lock-variable-name-face) 306 307 (fontified t) 307 312 (foreign-selection STRING fontified t) 312 316 (foreign-selection STRING fontified t) 316 319 (foreign-selection STRING fontified t face font-lock-variable-name-face) 319 320 (fontified t) 320 321 (foreign-selection STRING fontified t) 321 322 (fontified t face font-lock-string-face) 322 332 (foreign-selection STRING fontified t face font-lock-string-face) 332 333 (fontified t face font-lock-string-face) 333 334 (foreign-selection STRING fontified t) 334 338 (foreign-selection STRING fontified t) 338 344 (foreign-selection STRING fontified t face font-lock-variable-name-face) 344 346 (fontified t) 346 348 (foreign-selection STRING fontified t) 348 349 (foreign-selection STRING rear-nonsticky t fontified t)) . -1626) (undo-tree-id173 . -255) (undo-tree-id174 . -255) (undo-tree-id175 . -240) (undo-tree-id176 . -240) (undo-tree-id177 . -349) (undo-tree-id178 . -349) (undo-tree-id179 . -312) (undo-tree-id180 . -312) (undo-tree-id181 . -299) (undo-tree-id182 . -299) (undo-tree-id183 . -225) (undo-tree-id184 . -225) (undo-tree-id185 . -334) (undo-tree-id186 . -334) (undo-tree-id187 . -211) (undo-tree-id188 . -211) (undo-tree-id189 . -195) (undo-tree-id190 . -195) (undo-tree-id191 . -286) (undo-tree-id192 . -286) (undo-tree-id193 . -39) (undo-tree-id194 . -287) (undo-tree-id195 . -287) (undo-tree-id196 . -78) (undo-tree-id197 . -78) (undo-tree-id198 . -182) (undo-tree-id199 . -91) (undo-tree-id200 . -349) (undo-tree-id201 . -272) (undo-tree-id202 . -272) (undo-tree-id203 . -226) (undo-tree-id204 . -226) (undo-tree-id205 . -14) (undo-tree-id206 . -13) (undo-tree-id207 . -12) (undo-tree-id208 . -13) (undo-tree-id209 . -12) (undo-tree-id210 . -13) (undo-tree-id211 . -12) (undo-tree-id212 . -13) (undo-tree-id213 . -12) (undo-tree-id214 . -13) (undo-tree-id215 . -12) (undo-tree-id216 . -13) (undo-tree-id217 . -12) (undo-tree-id218 . -13) (undo-tree-id219 . -1) (undo-tree-id220 . -2) (undo-tree-id221 . -13) (undo-tree-id222 . -13) (undo-tree-id223 . -13) (undo-tree-id224 . -12) (undo-tree-id225 . -13) (undo-tree-id226 . -12) (undo-tree-id227 . -13) (undo-tree-id228 . -12) (undo-tree-id229 . -13) (undo-tree-id230 . -12) (undo-tree-id231 . -13) (undo-tree-id232 . -12) (undo-tree-id233 . -13) (undo-tree-id234 . -12) (undo-tree-id235 . -13) (undo-tree-id236 . -1) (undo-tree-id237 . -2) (undo-tree-id238 . -13) (undo-tree-id239 . -78) (undo-tree-id240 . -182) (undo-tree-id241 . -182) (undo-tree-id242 . -349) (undo-tree-id243 . -1) (undo-tree-id244 . -23) (undo-tree-id245 . -24) (undo-tree-id246 . -14) (undo-tree-id247 . -1) (undo-tree-id248 . -36) (undo-tree-id249 . -14) (undo-tree-id250 . -349) (undo-tree-id251 . -349) (undo-tree-id252 . -36) (undo-tree-id253 . -182) 1975) nil (25465 64403 487039 320000) 0 nil])
([nil nil ((913 . 920) (t 25465 64403 504815 811000)) nil (25467 13019 93949 576000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face font-lock-string-face)) . -504) (undo-tree-id24 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -505) (undo-tree-id25 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -506) (undo-tree-id26 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -507) (undo-tree-id27 . -1) 508 (t 25467 13019 106859 476000)) nil (25473 54348 344387 273000) 0 nil])
([nil nil ((504 . 511)) nil (25473 54348 344384 873000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . -510) (undo-tree-id23 . -1) 511) nil (25473 54348 344384 513000) 0 nil])
([nil nil ((510 . 512)) nil (25473 54348 344383 693000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . -521) (undo-tree-id20 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -522) (undo-tree-id21 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -523) (undo-tree-id22 . -1) 524) nil (25473 54348 344383 83000) 0 nil])
([nil nil ((521 . 522)) nil (25473 54348 344381 113000) 0 nil])
([nil nil ((522 . 529)) nil (25473 54348 344380 733000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . -539) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -540) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -541) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -542) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 543) nil (25473 54348 344379 303000) 0 nil])
([nil nil ((539 . 547)) nil (25473 54348 344353 332000) 0 nil])
([nil nil ((341 . 354) (t 25473 54348 359990 22000)) nil (25473 56112 951340 182000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-string-face)) . -341) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -342) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -343) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -344) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -345) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -346) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -347) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -348) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -349) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -350) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -351) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -352) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -353) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 354 (t 25473 56112 967180 678000)) nil (25473 56482 706701 920000) 0 nil])
([nil nil ((632 . 633) (t 25473 56482 726358 775000)) nil (25473 57305 741246 341000) 0 nil])
([nil nil ((646 . 647)) nil (25473 57305 741246 121000) 0 nil])
([nil nil ((660 . 661)) nil (25473 57305 741245 851000) 0 nil])
([nil nil ((673 . 674)) nil (25473 57305 741245 541000) 0 nil])
([nil nil ((693 . 694)) nil (25473 57305 741242 291000) 0 nil])
([nil nil ((437 . 445) (t 25473 57305 753436 341000)) nil (25473 57329 719252 186000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-string-face)) . 445) (#("o" 0 1 (fontified t face font-lock-string-face)) . 445) (#("l" 0 1 (fontified t face font-lock-string-face)) . 445) (#("B" 0 1 (fontified t face font-lock-string-face)) . 445)) nil (25473 57329 719248 196000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t)) . -468) (undo-tree-id0 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -469) (undo-tree-id1 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -470) (undo-tree-id2 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -471) (undo-tree-id3 . -1) 472 (t 25473 57329 733642 637000)) nil (25491 52067 674777 233000) 0 nil])
([nil nil ((468 . 476)) nil (25491 52067 674762 143000) 0 nil])
([nil nil ((437 . 444) (t 25491 52067 684850 735000)) nil (25491 52692 896509 372000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-string-face fontified t)) . 444) (#("c" 0 1 (face font-lock-string-face fontified t)) . 444) (#("r" 0 1 (face font-lock-string-face fontified t)) . 444) (#("a" 0 1 (face font-lock-string-face fontified t)) . 444) (#("e" 0 1 (face font-lock-string-face fontified t)) . 444) (#("s" 0 1 (face font-lock-string-face fontified t)) . 444) (#("e" 0 1 (face font-lock-string-face fontified t)) . 444) (#("R" 0 1 (face font-lock-string-face fontified t)) . 444)) nil (25491 52692 896508 882000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -467) (undo-tree-id12 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -468) (undo-tree-id13 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -469) (undo-tree-id14 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -470) (undo-tree-id15 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -471) (undo-tree-id16 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -472) (undo-tree-id17 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -473) (undo-tree-id18 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -474) (undo-tree-id19 . -1) 475) nil (25491 52692 896508 122000) 0 nil])
([nil nil ((467 . 475)) nil (25491 52692 896505 552000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -467) (undo-tree-id4 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -468) (undo-tree-id5 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -469) (undo-tree-id6 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -470) (undo-tree-id7 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -471) (undo-tree-id8 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -472) (undo-tree-id9 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -473) (undo-tree-id10 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -474) (undo-tree-id11 . -1) 475) nil (25491 52692 896504 512000) 0 nil])
([nil nil ((467 . 475)) nil (25491 52692 896491 731000) 0 nil])
([nil nil ((444 . 445) (t 25491 52692 909983 3000)) nil (25491 52697 145618 206000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -468) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -469) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -470) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -471) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -472) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -473) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -474) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -475) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 476 (t 25491 52697 158017 853000)) nil (25491 52886 243020 432000) 0 nil])
([nil nil ((468 . 476)) nil (25491 52886 242842 321000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -475) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) 476 (t 25491 52886 259569 254000)) nil (25491 53285 219740 769000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-string-face fontified t)) . -468) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -469) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -470) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -471) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -472) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -473) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -474) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) 475) nil (25491 53285 219735 749000) 0 nil])
([nil nil ((468 . 476)) nil (25491 53285 219626 18000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face font-lock-string-face)) . 68) (#("e" 0 1 (fontified t face font-lock-string-face)) . 68) (#("N" 0 1 (fontified t face font-lock-string-face)) . 68) (t 25491 53285 238842 350000)) nil (25512 4380 981695 599000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -68)) nil (25512 4380 981695 259000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . 68) (#("g" 0 1 (fontified t face font-lock-string-face)) . 68) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . 68) (#("H" 0 1 (fontified t face font-lock-string-face)) . 68)) nil (25512 4380 981694 929000) 0 nil])
([nil nil ((68 . 71)) nil (25512 4380 981693 989000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -449) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -450) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -451) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -452) (undo-tree-id11 . -1) 453) nil (25512 4380 981693 509000) 0 nil])
([nil nil ((449 . 454)) nil (25512 4380 981689 829000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . -452) (undo-tree-id0 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -453) (undo-tree-id1 . -1) 454) nil (25512 4380 981689 109000) 0 nil])
([nil nil ((452 . 457)) nil (25512 4380 981674 409000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . -528) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -529) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -530) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -531) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -532) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -533) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -534) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -535) (undo-tree-id35 . -1) 536 (t 25512 4380 998700 262000)) nil (25512 4611 637938 43000) 0 nil])
([nil nil ((528 . 537)) nil (25512 4611 637919 603000) 0 nil])
([nil nil ((88 . 89) (#("\"" 0 1 (fontified nil)) . -88) (undo-tree-id36 . -1) (88 . 90) (#("\"" 0 1 (fontified nil)) . -88) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (78 . 89) (t 25512 4611 648701 111000)) nil (25512 5210 623323 245000) 0 nil])
([nil nil ((89 . 97)) nil (25512 5210 623309 975000) 0 nil])
([nil nil ((333 . 336) (t 25512 5210 641860 311000)) nil (25512 8471 269454 51000) 0 nil])
([nil nil ((334 . 355)) nil (25512 8471 269453 651000) 0 nil])
([nil nil ((355 . 369)) nil (25512 8471 269453 511000) 0 nil])
([nil nil ((369 . 390)) nil (25512 8471 269453 361000) 0 nil])
([nil nil ((390 . 411)) nil (25512 8471 269453 111000) 0 nil])
([nil nil ((411 . 418)) nil (25512 8471 269452 541000) 0 nil])
([nil nil ((418 . 429)) nil (25512 8471 269452 211000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-comment-face)) . 428) (undo-tree-id53 . -1) (429 . 430)) nil (25512 8471 269452 21000) 0 nil])
([nil nil ((429 . 450)) nil (25512 8471 269451 571000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-comment-face)) . -447) (undo-tree-id50 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -448) (undo-tree-id51 . -1) (#("." 0 1 (fontified t face font-lock-comment-face)) . -449) (undo-tree-id52 . -1) 450) nil (25512 8471 269451 321000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-comment-face)) . -443) (undo-tree-id46 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -444) (undo-tree-id47 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -445) (undo-tree-id48 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -446) (undo-tree-id49 . -1) 447) nil (25512 8471 269450 71000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 442) (undo-tree-id45 . -1) 443) nil (25512 8471 269448 561000) 0 nil])
([nil nil ((442 . 454)) nil (25512 8471 269448 1000) 0 nil])
([nil nil ((454 . 455) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 453) (undo-tree-id44 . -1) (454 . 455)) nil (25512 8471 269447 761000) 0 nil])
([nil nil ((454 . 456)) nil (25512 8471 269447 151000) 0 nil])
([nil nil ((456 . 477)) nil (25512 8471 269447 1000) 0 nil])
([nil nil ((477 . 480)) nil (25512 8471 269446 811000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-comment-face)) . -479) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 480) nil (25512 8471 269446 131000) 0 nil])
([nil nil ((479 . 486)) nil (25512 8471 269433 561000) 0 nil])
([nil nil ((1002 . 1004) (t 25512 8471 281500 305000)) nil (25513 23125 818427 151000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 920) (#("s" 0 1 (fontified t)) . 920) (#("l" 0 1 (fontified t)) . 920) (#("a" 0 1 (fontified t)) . 920) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . 920) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (t 25513 23125 836856 642000)) nil (25513 23136 331447 244000) 0 nil])
([nil nil ((920 . 924)) nil (25513 23136 331433 294000) 0 nil])
([nil nil ((1245 . 1249) (t 25513 23136 348957 484000)) nil (25513 23235 351865 274000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1249) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("s" 0 1 (fontified t)) . 1249) (#("l" 0 1 (fontified t)) . 1249) (#("a" 0 1 (fontified t)) . 1249) (#("f" 0 1 (fontified t)) . 1249)) nil (25513 23235 351862 584000) 0 nil])
([nil nil ((1102 . 1103) (t 25513 23235 365907 347000)) nil (25513 23726 385772 320000) 0 nil])
([nil nil ((1264 . 1268) (t 25513 23726 398026 222000)) nil (25513 24360 967970 173000) 0 nil])
([nil nil ((1268 . 1272)) nil (25513 24360 967969 913000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1271) (undo-tree-id27 . -1) 1272) nil (25513 24360 967969 633000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-comment-face fontified t)) . -1267) (undo-tree-id23 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1268) (undo-tree-id24 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1269) (undo-tree-id25 . -1) (#("x" 0 1 (face font-lock-comment-face fontified t)) . -1270) (undo-tree-id26 . -1) 1271) nil (25513 24360 967968 873000) 0 nil])
([nil nil ((1267 . 1279)) nil (25513 24360 967967 63000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-comment-face fontified t)) . -1275) (undo-tree-id19 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -1276) (undo-tree-id20 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -1277) (undo-tree-id21 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1278) (undo-tree-id22 . -1) 1279) nil (25513 24360 967966 663000) 0 nil])
([nil nil ((1275 . 1291)) nil (25513 24360 967965 133000) 0 nil])
([nil nil ((1291 . 1302)) nil (25513 24360 967964 963000) 0 nil])
([nil nil ((1302 . 1310)) nil (25513 24360 967964 673000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -1309) (undo-tree-id18 . -1) 1310) nil (25513 24360 967964 73000) 0 nil])
([nil nil ((1309 . 1316)) nil (25513 24360 967962 943000) 0 nil])
([nil nil ((1316 . 1318)) nil (25513 24360 967962 573000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -1317) (undo-tree-id17 . -1) 1318) nil (25513 24360 967962 23000) 0 nil])
([nil nil ((1317 . 1319)) nil (25513 24360 967960 883000) 0 nil])
([nil nil ((1319 . 1320) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . 1318) (undo-tree-id16 . -1) (1319 . 1320)) nil (25513 24360 967960 193000) 0 nil])
([nil nil ((1318 . 1336)) nil (25513 24360 967958 893000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-comment-face fontified t)) . -1332) (undo-tree-id12 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1333) (undo-tree-id13 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1334) (undo-tree-id14 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1335) (undo-tree-id15 . -1) 1336) nil (25513 24360 967958 253000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1331) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 1332) nil (25513 24360 967954 463000) 0 nil])
([nil nil ((1331 . 1338)) nil (25513 24360 967940 713000) 0 nil])
([nil nil ((1280 . 1288) (t 25513 24360 983479 717000)) nil (25513 24383 850385 899000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -1287) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 1288) nil (25513 24383 850385 569000) 0 nil])
([nil nil ((1287 . 1292)) nil (25513 24383 850383 899000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1291) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 1292) nil (25513 24383 850383 539000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -1290) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 1291) nil (25513 24383 850381 889000) 0 nil])
([nil nil ((1290 . 1301)) nil (25513 24383 850371 189000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1301)) nil (25513 24383 850371 9000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("u" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("B" 0 1 (face font-lock-comment-face fontified t)) . 1301)) nil (25513 24383 850370 769000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1301)) nil (25513 24383 850370 439000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("i" 0 1 (face font-lock-comment-face fontified t)) . 1301)) nil (25513 24383 850370 139000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1301)) nil (25513 24383 850369 579000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . 1301)) nil (25513 24383 850369 299000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("d" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("e" 0 1 (face font-lock-comment-face fontified t)) . 1301) (#("e" 0 1 (face font-lock-comment-face fontified t)) . 1301)) nil (25513 24383 850368 909000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1301)) nil (25513 24383 850368 429000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . 1301)) nil (25513 24383 850367 889000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1301)) nil (25513 24383 850364 179000) 0 nil])
([nil nil ((704 . 715) (t 25513 24383 863690 81000)) nil (25516 4919 808746 333000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 713) (undo-tree-id0 . -1) 714) nil (25516 4919 808745 973000) 0 nil])
([nil nil ((714 . 720)) nil (25516 4919 808737 663000) 0 nil])
([nil nil ((729 . 735) (#(" " 0 1 (fontified nil)) . -729) (729 . 730) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -729) (729 . 730)) nil (25516 4919 808733 693000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-string-face)) . -625) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . 1) (undo-tree-id36 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -626) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -628) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -629) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -630) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -631) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -632) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) 633 (t 25516 4919 823432 197000)) nil (25516 5102 623419 141000) 0 nil])
([nil nil ((625 . 633)) nil (25516 5102 623295 590000) 0 nil])
([nil nil ((708 . 709) (704 . 709) (t 25516 5102 620898 392000)) nil (25516 5135 437509 219000) 0 nil])
([nil nil ((#("<i class='fa fa-book-open'></i>\"" 0 25 (fontified t face font-lock-string-face) 25 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face)) . 710) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -32)) nil (25516 5135 437508 739000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -708) (undo-tree-id189 . -1) (undo-tree-id190 . 1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 709) nil (25516 5135 437505 559000) 0 nil])
([nil nil ((708 . 713) (t 25516 5135 449161 706000)) nil (25516 5162 611648 345000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . -625) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . 1) (undo-tree-id228 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -626) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -628) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -629) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -630) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -631) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -632) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) 633 (t 25516 5162 609379 553000)) nil (25516 5179 325418 794000) 0 nil])
([nil nil ((625 . 633)) nil (25516 5179 325305 573000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -626) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -628) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -629) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -630) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -631) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -632) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) 633 (t 25516 5179 337513 735000)) nil (25516 5233 389039 38000) 0 nil])
([nil nil ((626 . 630)) nil (25516 5233 388910 237000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . 1) (#("M" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . 1) (t 25516 5233 401947 372000)) nil (25516 5277 38238 420000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -65) (undo-tree-id523 . 1)) nil (25516 5277 38236 10000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id520 . 1) (#("e" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id521 . 1) (#("W" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id522 . 1)) nil (25516 5277 38235 360000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -65) (undo-tree-id519 . 1)) nil (25516 5277 38233 990000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id514 . 1) (undo-tree-id515 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id516 . 1) (#("i" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id517 . 1) (#("S" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id518 . 1)) nil (25516 5277 38232 860000) 0 nil])
([nil nil ((65 . 72)) nil (25516 5277 38220 70000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . -622) (undo-tree-id545 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -623) (undo-tree-id546 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -624) (undo-tree-id547 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -625) (undo-tree-id548 . -1) 626 (t 25516 5277 50297 467000)) nil (25516 5394 910670 754000) 0 nil])
([nil nil ((622 . 629)) nil (25516 5394 910668 864000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-string-face)) . -604) (undo-tree-id537 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -605) (undo-tree-id538 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -606) (undo-tree-id539 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -607) (undo-tree-id540 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -608) (undo-tree-id541 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -609) (undo-tree-id542 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -610) (undo-tree-id543 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -611) (undo-tree-id544 . -1) 612) nil (25516 5394 910668 214000) 0 nil])
([nil nil ((604 . 613)) nil (25516 5394 910664 724000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-string-face)) . -611) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 612) nil (25516 5394 910662 383000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . -626) (undo-tree-id555 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id556 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -628) (undo-tree-id557 . -1) 629 (t 25516 5394 927242 919000)) nil (25516 5540 135008 563000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-string-face)) . -621) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -622) (undo-tree-id551 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -623) (undo-tree-id552 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -624) (undo-tree-id553 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -625) (undo-tree-id554 . -1) 626) nil (25516 5540 135006 373000) 0 nil])
([nil nil ((621 . 629)) nil (25516 5540 134992 842000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . -621) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . 1) (undo-tree-id599 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -622) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -623) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -624) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -625) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -626) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -628) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) 629 (t 25516 5540 152407 727000)) nil (25516 5616 600106 988000) 0 nil])
([nil nil ((621 . 627)) nil (25516 5616 599976 657000) 0 nil])
([nil nil ((65 . 69) (t 25516 5616 613021 6000)) nil (25516 5962 27432 17000) 0 nil])
([nil nil ((69 . 81)) nil (25516 5962 27431 777000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face font-lock-string-face)) . -80) (undo-tree-id814 . -1) 81) nil (25516 5962 27431 547000) 0 nil])
([nil nil ((80 . 81)) nil (25516 5962 27430 947000) 0 nil])
([nil nil ((81 . 87)) nil (25516 5962 27430 787000) 0 nil])
([nil nil ((86 . 87)) nil (25516 5962 27430 587000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -85) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -86) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) 87) nil (25516 5962 27429 937000) 0 nil])
([nil nil ((85 . 86)) nil (25516 5962 27417 846000) 0 nil])
([nil nil ((87 . 88)) nil (25516 5962 27417 516000) 0 nil])
([nil nil ((95 . 99)) nil (25516 5962 27414 346000) 0 nil])
([nil nil ((101 . 102) (t 25516 5962 43789 268000)) nil (25516 6175 445378 465000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-string-face)) . -68) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -69) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -70) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -71) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -72) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -75) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -76) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -77) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -79) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) 80 (t 25516 6175 457498 353000)) nil (25516 6237 141672 301000) 0 nil])
([nil nil ((68 . 73)) nil (25516 6237 141568 531000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -75) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -76) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -77) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 79) nil (25516 6237 141567 270000) 0 nil])
([nil nil ((74 . 89)) nil (25516 6237 141524 670000) 0 nil])
([nil nil ((89 . 94)) nil (25516 6237 141524 360000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -93) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) 94) nil (25516 6237 141523 770000) 0 nil])
([nil nil ((93 . 94)) nil (25516 6237 141513 830000) 0 nil])
([nil nil ((94 . 96)) nil (25516 6237 141510 310000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) 79 (t 25516 6237 153992 425000)) nil (25516 6279 473538 39000) 0 nil])
([nil nil ((78 . 84)) nil (25516 6279 473534 159000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -93) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1)) nil (25516 6279 473533 769000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face font-lock-string-face)) . 93) (#("f" 0 1 (fontified t face font-lock-string-face)) . 93) (#("-" 0 1 (fontified t face font-lock-string-face)) . 93) (#("a" 0 1 (fontified t face font-lock-string-face)) . 93) (#("f" 0 1 (fontified t face font-lock-string-face)) . 93)) nil (25516 6279 473523 129000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) 75 (t 25516 6279 486331 425000)) nil (25516 6296 633971 827000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -92) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) 93) nil (25516 6296 633965 317000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . 1) (undo-tree-id1260 . -1) 75 (t 25516 6296 642468 815000)) nil (25516 6308 519217 898000) 0 nil])
([nil nil ((74 . 75)) nil (25516 6308 519213 598000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1)) nil (25516 6308 519213 158000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . 91) (undo-tree-id1240 . -1) (undo-tree-id1241 . 1) (undo-tree-id1242 . -1)) nil (25516 6308 519208 488000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -64) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . 1) (undo-tree-id1280 . -1) 65 (t 25516 6308 534564 46000)) nil (25516 6320 918523 567000) 0 nil])
([nil nil ((64 . 65) (#("\"" 0 1 (fontified nil)) . -64) (undo-tree-id1272 . -1) (64 . 66) (#("\"" 0 1 (fontified nil)) . -64) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (64 . 65)) nil (25516 6320 918520 857000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 65) (undo-tree-id1268 . -1) (undo-tree-id1269 . 1) (undo-tree-id1270 . 1) (undo-tree-id1271 . -1)) nil (25516 6320 918519 237000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) 105) nil (25516 6320 918517 237000) 0 nil])
([nil nil ((104 . 105) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -104) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (104 . 105)) nil (25516 6320 918512 687000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 92) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) 93 (t 25516 6320 934663 346000)) nil (25516 6410 416689 132000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-string-face)) . -83) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -84) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -85) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -86) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -87) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -88) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -89) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -90) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (#(">" 0 1 (fontified t face font-lock-string-face)) . -91) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) 92) nil (25516 6410 416687 802000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 82) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) 83) nil (25516 6410 416681 342000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-string-face)) . -68) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -69) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -70) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -71) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -72) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (#("=" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -75) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -76) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -77) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -79) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -80) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -81) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) 82) nil (25516 6410 416679 752000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . 67) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) 68) nil (25516 6410 416669 951000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face font-lock-string-face)) . -65) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -66) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 67) nil (25516 6410 416668 91000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t face font-lock-string-face)) . 72) (#("i" 0 1 (fontified t face font-lock-string-face)) . 72) (#("/" 0 1 (fontified t face font-lock-string-face)) . 72) (#("<" 0 1 (fontified t face font-lock-string-face)) . 72)) nil (25516 6410 416657 351000) 0 nil])
([nil nil ((72 . 73)) nil (25516 6410 416653 791000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 659) (t 25516 6410 431380 38000)) nil (25516 6581 150388 288000) 0 nil])
([nil nil ((659 . 660)) nil (25516 6581 150387 868000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -739) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 740) nil (25516 6581 150386 438000) 0 nil])
([nil nil ((739 . 740)) nil (25516 6581 150372 688000) 0 nil])
([nil nil ((777 . 781) (t 25516 6581 148747 150000)) nil (25516 6909 916140 851000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . 781) (#("l" 0 1 (face font-lock-string-face fontified t)) . 781) (#("i" 0 1 (face font-lock-string-face fontified t)) . 781) (#("m" 0 1 (face font-lock-string-face fontified t)) . 781) (#("s" 0 1 (face font-lock-string-face fontified t)) . 781)) nil (25516 6909 916135 781000) 0 nil])
([nil nil ((915 . 920) (t 25516 6909 931377 676000)) nil (25516 7584 104882 10000) 0 nil])
([nil nil ((#("true" 0 4 (face font-lock-keyword-face fontified t)) . 920) (undo-tree-id2 . -4)) nil (25516 7584 104879 550000) 0 nil])
([nil nil ((485 . 486) (t 25516 7584 116761 488000)) nil (25516 7629 528086 25000) 0 nil])
([nil nil ((486 . 490)) nil (25516 7629 528085 715000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-comment-face fontified t)) . -488) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -489) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 490) nil (25516 7629 528085 195000) 0 nil])
([nil nil ((488 . 496)) nil (25516 7629 528079 265000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 495) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 496) nil (25516 7629 528078 955000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -494) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 495) nil (25516 7629 528077 15000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 493) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 494) nil (25516 7629 528075 175000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -492) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 493) nil (25516 7629 528072 155000) 0 nil])
([nil nil ((492 . 512)) nil (25516 7629 528068 374000) 0 nil])
([nil nil ((512 . 517)) nil (25516 7629 528067 984000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-comment-face fontified t)) . -514) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -515) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -516) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 517) nil (25516 7629 528064 784000) 0 nil])
([nil nil ((#("favicon = \"/static/\"" 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t) 10 20 (fontified t face font-lock-string-face)) . 76) (undo-tree-id3 . -20) (undo-tree-id4 . -20) (undo-tree-id5 . -19) (undo-tree-id6 . -20) (undo-tree-id7 . -20) (undo-tree-id8 . -20) (t 25516 7629 541124 231000)) nil (25517 25281 179402 254000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -76) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (25517 25281 179396 874000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -945) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("r" 0 1 (fontified t)) . -946) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("u" 0 1 (fontified t)) . -947) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -948) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 949 (t 25517 25281 197107 750000)) nil (25517 25534 626634 100000) 0 nil])
([nil nil ((945 . 950)) nil (25517 25534 626488 479000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 923) (#("s" 0 1 (fontified t)) . 923) (#("l" 0 1 (fontified t)) . 923) (#("a" 0 1 (fontified t)) . 923) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . 923) (t 25517 25534 643172 293000)) nil (25517 25873 283372 31000) 0 nil])
([nil nil ((923 . 927)) nil (25517 25873 283371 551000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -944) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("a" 0 1 (fontified t)) . -945) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("l" 0 1 (fontified t)) . -946) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("s" 0 1 (fontified t)) . -947) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -948) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 949) nil (25517 25873 283369 551000) 0 nil])
([nil nil ((944 . 948)) nil (25517 25873 283143 399000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 923) (#("u" 0 1 (fontified t)) . 923) (#("r" 0 1 (fontified t)) . 923) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . 923) (t 25517 25873 301928 589000)) nil (25517 25889 831687 651000) 0 nil])
([nil nil ((923 . 928)) nil (25517 25889 831683 561000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -945) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("r" 0 1 (fontified t)) . -946) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("u" 0 1 (fontified t)) . -947) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -948) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 949 (t 25517 25889 850063 278000)) nil (25517 25908 543983 481000) 0 nil])
([nil nil ((945 . 950)) nil (25517 25908 543962 431000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 923) (#("s" 0 1 (fontified t)) . 923) (#("l" 0 1 (fontified t)) . 923) (#("a" 0 1 (fontified t)) . 923) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . 923)) nil (25517 25908 543961 290000) 0 nil])
([nil nil ((923 . 927)) nil (25517 25908 543956 660000) 0 nil])
([nil nil ((1921 . 1923) (t 25517 25908 546215 490000)) nil (25517 26129 971400 168000) 0 nil])
([nil nil ((1922 . 1928)) nil (25517 26129 971399 608000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face font-lock-comment-face)) . -1925) (undo-tree-id216 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -1926) (undo-tree-id217 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -1927) (undo-tree-id218 . -1) 1928) nil (25517 26129 971398 708000) 0 nil])
([nil nil ((1925 . 1937)) nil (25517 26129 971396 127000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . 1936) (undo-tree-id215 . -1) 1937) nil (25517 26129 971395 287000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-comment-face)) . -1935) (undo-tree-id214 . -1) 1936) nil (25517 26129 971393 447000) 0 nil])
([nil nil ((1935 . 1950)) nil (25517 26129 971384 547000) 0 nil])
([nil nil ((1950 . 1958)) nil (25517 26129 971384 127000) 0 nil])
([nil nil ((1958 . 1975)) nil (25517 26129 971383 727000) 0 nil])
([nil nil ((1975 . 1976)) nil (25517 26129 971383 127000) 0 nil])
([nil nil ((1976 . 1978)) nil (25517 26129 971382 517000) 0 nil])
([nil nil ((949 . 970)) nil (25517 26129 971381 927000) 0 nil])
([nil nil ((970 . 990)) nil (25517 26129 971381 247000) 0 nil])
([nil nil ((990 . 994)) nil (25517 26129 971377 417000) 0 nil])
([nil nil ((952 . 958) (t 25517 26129 984018 207000)) nil (25517 26145 805072 386000) 0 nil])
([nil nil ((1158 . 1159)) nil (25517 26145 805068 296000) 0 nil])
([nil nil ((#("# Some notes on the current website Dec-29-2022-04:03" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 36 (fontified t face font-lock-comment-face) 36 53 (fontified t face font-lock-comment-face)) . 1974) (undo-tree-id236 . -36) (undo-tree-id237 . -53) (undo-tree-id238 . -36) (undo-tree-id239 . -53) (undo-tree-id240 . -53) (undo-tree-id241 . -53) (undo-tree-id242 . -53) (t 25517 26145 824147 160000)) nil (25517 26156 730482 35000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1974) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1)) nil (25517 26156 730477 895000) 0 nil])
([nil nil ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . 1974) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -1) (undo-tree-id225 . -2) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -2)) nil (25517 26156 730473 425000) 0 nil])
([nil nil ((#("baseURL = 'http://example.org/'
languageCode = 'en-us'
title = \"Welcome!\"

theme = \"vanilla-bootstrap-hugo-theme\" 


DefaultContentLanguage = \"en\"
SectionPagesMenu = \"main\"
Paginate = 6 # this is set low for demonstrating with dummy content. Set to a higher number
googleAnalytics = \"\"
enableRobotsTXT = true

# Note: We can include a picture by putting it in the static folder and then using markdown to
# use it in a html page.
# I need to fix the icons here. 

# made a Change to feather. 


[permalinks]
post = \"/:filename/\"

[[menu.nav]]
name = \"Home\"
pre = \"home\"
url = \"/\"
weight = 1

[[menu.nav]]
name = \"Research\"
pre = \"coffee\"
url = \"/research/\"
weight = 3

[[menu.nav]]
name = \"Teaching\"
pre = \"book-open\"
url = \"/teaching/\"
weight = 2

[[menu.nav]]
name = \"About\"
pre = \"tool\"
url = \"/about/\"
weight = 4

#[[menu.nav]]
#name = \"RSS\"
#pre = \"rss\"
#url = \"/index.xml\"
#weight = 5

[params]
includeBootstrapJs = true
showActiveNav = false # NOTE: this causes some issues so it is disabed. 
containerMaxWidth = \"700px\"
dateFormat = \"Jan 2, 2006\"
# homeText = \"Welcome to the Vanilla theme demo. Have a look around. Maybe even eat some ice cream.\"
# footerText = \"WoohOO Made with [Hugo](https://gohugo.io/) & [Vanilla](https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme)\"
hideFooter = true
katex = true
# Katex is fine. But Inline needed a hack. This hack is now in the Katex file. 


[markup]
defaultMarkdownHandler = \"goldmark\"

[markup.goldmark.extensions]
definitionList = true
footnote = true
linkify = true
strikethrough = true
table = true
taskList = true
typographer = true

[markup.goldmark.parser]
attribute = true
autoHeadingID = true

[markup.goldmark.renderer]
hardWraps = false
unsafe = true
xHTML = false

  [markup.highlight]
  codeFences = true
  hl_Lines = \"\"
  lineNoStart = 1
  lineNos = false
  lineNumbersInTable = true
  noClasses = true
  style = \"monokai\"
  tabWidth = 4

  [markup.tableOfContents]
  endLevel = 6
  startLevel = 2


" 0 7 (fontified t) 7 10 (fontified t) 10 31 (fontified t) 31 32 (fontified t) 32 44 (fontified t) 44 47 (fontified t) 47 54 (fontified t) 54 55 (fontified t) 55 60 (fontified t) 60 63 (fontified t) 63 73 (fontified t) 73 75 (fontified t) 75 80 (fontified t) 80 83 (fontified t) 83 113 (fontified t) 113 115 (fontified t) 115 117 (fontified t) 117 139 (fontified t) 139 142 (fontified t) 142 146 (fontified t) 146 147 (fontified t) 147 163 (fontified t) 163 166 (fontified t) 166 172 (fontified t) 172 173 (fontified t) 173 181 (fontified t) 181 186 (fontified t) 186 188 (fontified t) 188 265 (fontified t) 265 280 (fontified t) 280 283 (fontified t) 283 285 (fontified t) 285 286 (fontified t) 286 301 (fontified t) 301 304 (fontified t) 304 308 (fontified t) 308 310 (fontified t) 310 312 (fontified t font-lock-fontified t face font-lock-comment-face) 312 404 (fontified t font-lock-fontified t face font-lock-comment-face) 404 405 (fontified t) 405 407 (fontified t font-lock-fontified t face font-lock-comment-face) 407 429 (fontified t font-lock-fontified t face font-lock-comment-face) 429 430 (fontified t) 430 432 (fontified t font-lock-fontified t face font-lock-comment-face) 432 462 (fontified t font-lock-fontified t face font-lock-comment-face) 462 463 (fontified t) 463 464 (fontified t) 464 466 (fontified t font-lock-fontified t face font-lock-comment-face) 466 492 (fontified t font-lock-fontified t face font-lock-comment-face) 492 493 (fontified t) 493 495 (fontified t) 495 496 (fontified t face (rainbow-delimiters-depth-1-face)) 496 506 (fontified t) 506 507 (fontified t face (rainbow-delimiters-depth-1-face)) 507 508 (fontified t) 508 512 (fontified t) 512 515 (fontified t) 515 516 (fontified t) 516 527 (fontified t face (italic) font-lock-multiline t org-emphasis t) 527 528 (fontified t) 528 530 (fontified t) 530 531 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-1-face org-link)) 531 532 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-2-face org-link) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 532 539 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 539 540 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 540 541 (fontified t face (rainbow-delimiters-depth-2-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 541 542 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face (rainbow-delimiters-depth-1-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 542 543 (fontified t) 543 547 (fontified t) 547 550 (fontified t) 550 556 (fontified t) 556 557 (fontified t) 557 560 (fontified t) 560 563 (fontified t) 563 569 (fontified t) 569 570 (fontified t) 570 573 (fontified t) 573 576 (fontified t) 576 579 (fontified t) 579 580 (fontified t) 580 586 (fontified t) 586 592 (fontified t) 592 593 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-1-face org-link)) 593 594 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-2-face org-link) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 594 601 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 601 602 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 602 603 (fontified t face (rainbow-delimiters-depth-2-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 603 604 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face (rainbow-delimiters-depth-1-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 604 605 (fontified t) 605 609 (fontified t) 609 612 (fontified t) 612 622 (fontified t) 622 623 (fontified t) 623 626 (fontified t) 626 629 (fontified t) 629 637 (fontified t) 637 638 (fontified t) 638 641 (fontified t) 641 644 (fontified t) 644 645 (fontified t) 645 655 (fontified t face (italic) font-lock-multiline t org-emphasis t) 655 656 (fontified t) 656 657 (fontified t) 657 663 (fontified t) 663 669 (fontified t) 669 670 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-1-face org-link)) 670 671 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-2-face org-link) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 671 678 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 678 679 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 679 680 (fontified t face (rainbow-delimiters-depth-2-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 680 681 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face (rainbow-delimiters-depth-1-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 681 682 (fontified t) 682 686 (fontified t) 686 689 (fontified t) 689 699 (fontified t) 699 700 (fontified t) 700 703 (fontified t) 703 706 (fontified t) 706 717 (fontified t) 717 718 (fontified t) 718 721 (fontified t) 721 724 (fontified t) 724 725 (fontified t) 725 735 (fontified t face (italic) font-lock-multiline t org-emphasis t) 735 736 (fontified t) 736 737 (fontified t) 737 743 (fontified t) 743 749 (fontified t) 749 750 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-1-face org-link)) 750 751 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-2-face org-link) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 751 758 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 758 759 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 759 760 (fontified t face (rainbow-delimiters-depth-2-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 760 761 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face (rainbow-delimiters-depth-1-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 761 762 (fontified t) 762 766 (fontified t) 766 769 (fontified t) 769 776 (fontified t) 776 777 (fontified t) 777 780 (fontified t) 780 783 (fontified t) 783 789 (fontified t) 789 790 (fontified t) 790 793 (fontified t) 793 796 (fontified t) 796 797 (fontified t) 797 804 (fontified t face (italic) font-lock-multiline t org-emphasis t) 804 805 (fontified t) 805 806 (fontified t) 806 812 (fontified t) 812 818 (fontified t) 818 819 (fontified t) 819 820 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-1-face org-link)) 820 821 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t face (rainbow-delimiters-depth-2-face org-link) rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 821 828 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 828 829 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 829 830 (fontified t face (rainbow-delimiters-depth-2-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 830 831 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face (rainbow-delimiters-depth-1-face org-link) invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: menu.nav" htmlize-link (:uri "menu.nav") font-lock-multiline t) 831 832 (fontified t) 832 833 (fontified t face (doom-themes-org-hash-tag)) 833 837 (fontified t face (doom-themes-org-hash-tag)) 837 846 (fontified t) 846 847 (fontified t face (doom-themes-org-hash-tag)) 847 850 (fontified t face (doom-themes-org-hash-tag)) 850 859 (fontified t) 859 860 (fontified t face (doom-themes-org-hash-tag)) 860 863 (fontified t face (doom-themes-org-hash-tag)) 863 879 (fontified t) 879 880 (fontified t face (doom-themes-org-hash-tag)) 880 886 (fontified t face (doom-themes-org-hash-tag)) 886 891 (fontified t) 891 892 (fontified t) 892 893 (fontified t face (rainbow-delimiters-depth-1-face)) 893 899 (fontified t) 899 900 (fontified t face (rainbow-delimiters-depth-1-face)) 900 901 (fontified t) 901 919 (fontified t) 919 922 (fontified t) 922 926 (fontified t) 926 927 (fontified t) 927 940 (fontified t) 940 943 (fontified t) 943 948 (fontified t) 948 949 (fontified t) 949 951 (fontified t) 951 957 (fontified t) 957 999 (fontified t) 999 1000 (fontified t) 1000 1017 (fontified t) 1017 1020 (fontified t) 1020 1027 (fontified t) 1027 1028 (fontified t) 1028 1038 (fontified t) 1038 1041 (fontified t) 1041 1054 (fontified t) 1054 1055 (fontified t) 1055 1057 (fontified t font-lock-fontified t face font-lock-comment-face) 1057 1155 (fontified t font-lock-fontified t face font-lock-comment-face) 1155 1156 (fontified t) 1156 1158 (fontified t font-lock-fontified t face font-lock-comment-face) 1158 1196 (fontified t font-lock-fontified t face font-lock-comment-face) 1196 1213 (fontified t face font-lock-comment-face mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://gohugo.io/" htmlize-link (:uri "https://gohugo.io/") font-lock-multiline t font-lock-fontified t) 1213 1214 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face font-lock-comment-face mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://gohugo.io/" htmlize-link (:uri "https://gohugo.io/") font-lock-multiline t font-lock-fontified t) 1214 1228 (fontified t font-lock-fontified t face font-lock-comment-face) 1228 1284 (fontified t face font-lock-comment-face mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme" htmlize-link (:uri "https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme") font-lock-multiline t font-lock-fontified t) 1284 1285 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face font-lock-comment-face mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme" htmlize-link (:uri "https://github.com/zwbetz-gh/vanilla-bootstrap-hugo-theme") font-lock-multiline t font-lock-fontified t) 1285 1287 (fontified t font-lock-fontified t face font-lock-comment-face) 1287 1288 (fontified t) 1288 1298 (fontified t) 1298 1301 (fontified t) 1301 1305 (fontified t) 1305 1306 (fontified t) 1306 1311 (fontified t) 1311 1314 (fontified t) 1314 1318 (fontified t) 1318 1319 (fontified t) 1319 1321 (fontified t font-lock-fontified t face font-lock-comment-face) 1321 1398 (fontified t font-lock-fontified t face font-lock-comment-face) 1398 1399 (fontified t) 1399 1401 (fontified t) 1401 1402 (fontified t face (rainbow-delimiters-depth-1-face)) 1402 1408 (fontified t) 1408 1409 (fontified t face (rainbow-delimiters-depth-1-face)) 1409 1410 (fontified t) 1410 1432 (fontified t) 1432 1435 (fontified t) 1435 1445 (fontified t) 1445 1447 (fontified t) 1447 1448 (fontified t face (rainbow-delimiters-depth-1-face)) 1448 1474 (fontified t) 1474 1475 (fontified t face (rainbow-delimiters-depth-1-face)) 1475 1476 (fontified t) 1476 1490 (fontified t) 1490 1493 (fontified t) 1493 1497 (fontified t) 1497 1498 (fontified t) 1498 1506 (fontified t) 1506 1509 (fontified t) 1509 1513 (fontified t) 1513 1514 (fontified t) 1514 1521 (fontified t) 1521 1524 (fontified t) 1524 1528 (fontified t) 1528 1529 (fontified t) 1529 1531 (fontified t) 1531 1542 (fontified t) 1542 1545 (fontified t) 1545 1549 (fontified t) 1549 1550 (fontified t) 1550 1555 (fontified t) 1555 1558 (fontified t) 1558 1562 (fontified t) 1562 1563 (fontified t) 1563 1571 (fontified t) 1571 1574 (fontified t) 1574 1578 (fontified t) 1578 1579 (fontified t) 1579 1590 (fontified t) 1590 1593 (fontified t) 1593 1597 (fontified t) 1597 1599 (fontified t) 1599 1600 (fontified t face (rainbow-delimiters-depth-1-face)) 1600 1622 (fontified t) 1622 1623 (fontified t face (rainbow-delimiters-depth-1-face)) 1623 1624 (fontified t) 1624 1626 (fontified t) 1626 1627 (fontified t) 1627 1633 (fontified t) 1633 1636 (fontified t) 1636 1640 (fontified t) 1640 1641 (fontified t) 1641 1654 (fontified t) 1654 1657 (fontified t) 1657 1661 (fontified t) 1661 1663 (fontified t) 1663 1664 (fontified t face (rainbow-delimiters-depth-1-face)) 1664 1667 (fontified t) 1667 1688 (fontified t) 1688 1689 (fontified t face (rainbow-delimiters-depth-1-face)) 1689 1690 (fontified t) 1690 1699 (fontified t) 1699 1702 (fontified t) 1702 1707 (fontified t) 1707 1708 (fontified t) 1708 1714 (fontified t) 1714 1717 (fontified t) 1717 1721 (fontified t) 1721 1722 (fontified t) 1722 1727 (fontified t) 1727 1730 (fontified t) 1730 1735 (fontified t) 1735 1739 (fontified t) 1739 1740 (fontified t face (rainbow-delimiters-depth-1-face)) 1740 1756 (fontified t) 1756 1757 (fontified t face (rainbow-delimiters-depth-1-face)) 1757 1760 (fontified t) 1760 1770 (fontified t) 1770 1773 (fontified t) 1773 1777 (fontified t) 1777 1780 (fontified t) 1780 1788 (fontified t) 1788 1791 (fontified t) 1791 1793 (fontified t) 1793 1796 (fontified t) 1796 1807 (fontified t) 1807 1814 (fontified t) 1814 1821 (fontified t) 1821 1824 (fontified t) 1824 1829 (fontified t) 1829 1832 (fontified t) 1832 1850 (fontified t) 1850 1853 (fontified t) 1853 1857 (fontified t) 1857 1860 (fontified t) 1860 1869 (fontified t) 1869 1872 (fontified t) 1872 1876 (fontified t) 1876 1879 (fontified t) 1879 1884 (fontified t) 1884 1887 (fontified t) 1887 1896 (fontified t) 1896 1899 (fontified t) 1899 1907 (fontified t) 1907 1915 (fontified t) 1915 1916 (fontified t face (rainbow-delimiters-depth-1-face)) 1916 1938 (fontified t) 1938 1939 (fontified t face (rainbow-delimiters-depth-1-face)) 1939 1942 (fontified t) 1942 1950 (fontified t) 1950 1957 (fontified t) 1957 1967 (fontified t) 1967 1972 (fontified t) 1972 1973 (fontified t) 1973 1974 (fontified t)) . 1) (undo-tree-id102 . -75) (undo-tree-id103 . -75) (undo-tree-id104 . -762) (undo-tree-id105 . -926) (undo-tree-id106 . -1974) (undo-tree-id107 . -943) (undo-tree-id108 . -943) (undo-tree-id109 . -943) (undo-tree-id110 . -762) (undo-tree-id111 . -943) (undo-tree-id112 . -926) (undo-tree-id113 . -926) (undo-tree-id114 . -762) (undo-tree-id115 . -943) (undo-tree-id116 . -1972) (undo-tree-id117 . -948) (undo-tree-id118 . -951) (undo-tree-id119 . -1973) (undo-tree-id120 . -806) (undo-tree-id121 . -806) (undo-tree-id122 . -817) (undo-tree-id123 . -817) (undo-tree-id124 . -818) (undo-tree-id125 . -818) (undo-tree-id126 . -832) (undo-tree-id127 . -832) (undo-tree-id128 . -846) (undo-tree-id129 . -846) (undo-tree-id130 . -859) (undo-tree-id131 . -859) (undo-tree-id132 . -879) (undo-tree-id133 . -879) (undo-tree-id134 . -891) (undo-tree-id135 . -891) (undo-tree-id136 . -892) (undo-tree-id137 . -892) (undo-tree-id138 . -901) (undo-tree-id139 . -901) (undo-tree-id140 . -927) (undo-tree-id141 . -927) (undo-tree-id142 . -790) (undo-tree-id143 . -790) (undo-tree-id144 . -777) (undo-tree-id145 . -777) (undo-tree-id146 . -762) (undo-tree-id147 . -762) (undo-tree-id148 . -749) (undo-tree-id149 . -749) (undo-tree-id150 . -748) (undo-tree-id151 . -748) (undo-tree-id152 . -737) (undo-tree-id153 . -737) (undo-tree-id154 . -718) (undo-tree-id155 . -718) (undo-tree-id156 . -700) (undo-tree-id157 . -700) (undo-tree-id158 . -682) (undo-tree-id159 . -682) (undo-tree-id160 . -669) (undo-tree-id161 . -669) (undo-tree-id162 . -668) (undo-tree-id163 . -668) (undo-tree-id164 . -657) (undo-tree-id165 . -657) (undo-tree-id166 . -638) (undo-tree-id167 . -638) (undo-tree-id168 . -623) (undo-tree-id169 . -623) (undo-tree-id170 . -605) (undo-tree-id171 . -605) (undo-tree-id172 . -592) (undo-tree-id173 . -592) (undo-tree-id174 . -591) (undo-tree-id175 . -591) (undo-tree-id176 . -580) (undo-tree-id177 . -580) (undo-tree-id178 . -570) (undo-tree-id179 . -570) (undo-tree-id180 . -557) (undo-tree-id181 . -557) (undo-tree-id182 . -543) (undo-tree-id183 . -543) (undo-tree-id184 . -530) (undo-tree-id185 . -530) (undo-tree-id186 . -529) (undo-tree-id187 . -529) (undo-tree-id188 . -508) (undo-tree-id189 . -508) (undo-tree-id190 . -495) (undo-tree-id191 . -495) (undo-tree-id192 . -494) (undo-tree-id193 . -494) (undo-tree-id194 . -493) (undo-tree-id195 . -493) (undo-tree-id196 . -464) (undo-tree-id197 . -464) (undo-tree-id198 . -463) (undo-tree-id199 . -463) (undo-tree-id200 . -430) (undo-tree-id201 . -430) (undo-tree-id202 . -405) (undo-tree-id203 . -405) (undo-tree-id204 . -310) (undo-tree-id205 . -310) (undo-tree-id206 . -309) (undo-tree-id207 . -309) (undo-tree-id208 . -286) (undo-tree-id209 . -286) (undo-tree-id210 . -265) (undo-tree-id211 . -265) (undo-tree-id212 . -173) (undo-tree-id213 . -173) (undo-tree-id214 . -147) (undo-tree-id215 . -147) (undo-tree-id216 . -117) (undo-tree-id217 . -117) (undo-tree-id218 . -116) (undo-tree-id219 . -116) (undo-tree-id220 . -115) (undo-tree-id221 . -115) (undo-tree-id222 . -75) (undo-tree-id223 . -75) (undo-tree-id224 . -74) (undo-tree-id225 . -74) (undo-tree-id226 . -55) (undo-tree-id227 . -55) (undo-tree-id228 . -32) (undo-tree-id229 . -32) (undo-tree-id230 . -1973) (undo-tree-id231 . -1973) (undo-tree-id232 . -806) (undo-tree-id233 . -32) (undo-tree-id234 . -1972) (undo-tree-id235 . -1973) (undo-tree-id236 . -1973) (undo-tree-id237 . -1973) (undo-tree-id238 . -806) (undo-tree-id239 . -1974) (undo-tree-id240 . -1000) (undo-tree-id241 . -1000) (undo-tree-id242 . -1028) (undo-tree-id243 . -1028) (undo-tree-id244 . -1055) (undo-tree-id245 . -1055) (t 25517 26172 108361 129000)) nil (25517 26214 688211 315000) 0 nil])
([nil nil ((1 . 4)) nil (25517 26214 688166 275000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . -3) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 4) nil (25517 26214 688165 915000) 0 nil])
([nil nil ((3 . 7)) nil (25517 26214 688163 985000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . -6) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 7) nil (25517 26214 688163 55000) 0 nil])
([nil nil ((6 . 9)) nil (25517 26214 688148 555000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t font-lock-fontified t face org-document-info-keyword)) . 3) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1)) nil (25517 26214 688147 915000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t font-lock-fontified t)) . 3) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("e" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . 3) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("l" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . 3) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("t" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . 3) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("i" 0 1 (fontified t font-lock-fontified t face org-meta-line)) . 3) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1)) nil (25517 26214 688145 185000) 0 nil])
([nil nil ((3 . 24)) nil (25517 26214 688132 25000) 0 nil])
([nil nil ((24 . 26)) nil (25517 26214 688131 685000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil font-lock-fontified t face org-document-title)) . 25) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (26 . 27)) nil (25517 26214 688131 185000) 0 nil])
([nil nil ((26 . 30)) nil (25517 26214 688129 485000) 0 nil])
([nil nil ((30 . 51)) nil (25517 26214 688129 175000) 0 nil])
([nil nil ((51 . 54)) nil (25517 26214 688128 895000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t font-lock-fontified t face org-level-1)) . 53) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 54) nil (25517 26214 688127 875000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t font-lock-fontified t face org-level-1)) . -51) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("r" 0 1 (fontified t font-lock-fontified t face org-level-1)) . -52) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 53) nil (25517 26214 688125 5000) 0 nil])
([nil nil ((51 . 52)) nil (25517 26214 688067 814000) 0 nil])
([nil nil ((52 . 54)) nil (25517 26214 688067 484000) 0 nil])
([nil nil ((54 . 71)) nil (25517 26214 688067 94000) 0 nil])
([nil nil ((71 . 73)) nil (25517 26214 688063 644000) 0 nil])
([nil nil ((73 . 90) (t 25517 26214 704707 912000)) nil (25517 26327 154326 644000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -89) (undo-tree-id784 . -1) (undo-tree-id785 . -1) 90) nil (25517 26327 154326 194000) 0 nil])
([nil nil ((89 . 109)) nil (25517 26327 154325 424000) 0 nil])
([nil nil ((109 . 121)) nil (25517 26327 154325 274000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -118) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("m" 0 1 (fontified t)) . -119) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("s" 0 1 (fontified t)) . -120) (undo-tree-id782 . -1) (undo-tree-id783 . -1) 121) nil (25517 26327 154324 714000) 0 nil])
([nil nil ((118 . 122)) nil (25517 26327 154322 714000) 0 nil])
([nil nil ((122 . 124) (#(" " 0 1 (fontified nil)) . 121) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (122 . 123)) nil (25517 26327 154322 224000) 0 nil])
([nil nil ((122 . 139)) nil (25517 26327 154321 204000) 0 nil])
([nil nil ((139 . 156)) nil (25517 26327 154320 784000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -153) (undo-tree-id773 . -1) (#("o" 0 1 (fontified t)) . -154) (undo-tree-id774 . -1) (#("d" 0 1 (fontified t)) . -155) (undo-tree-id775 . -1) 156) nil (25517 26327 154320 124000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 152) (undo-tree-id772 . -1) 153) nil (25517 26327 154318 584000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -143) (undo-tree-id763 . -1) (#("o" 0 1 (fontified t)) . -144) (undo-tree-id764 . -1) (#("o" 0 1 (fontified t)) . -145) (undo-tree-id765 . -1) (#("t" 0 1 (fontified t)) . -146) (undo-tree-id766 . -1) (#("s" 0 1 (fontified t)) . -147) (undo-tree-id767 . -1) (#("t" 0 1 (fontified t)) . -148) (undo-tree-id768 . -1) (#("r" 0 1 (fontified t)) . -149) (undo-tree-id769 . -1) (#("a" 0 1 (fontified t)) . -150) (undo-tree-id770 . -1) (#("m" 0 1 (fontified t)) . -151) (undo-tree-id771 . -1) 152) nil (25517 26327 154317 344000) 0 nil])
([nil nil ((143 . 164)) nil (25517 26327 154314 574000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -163) (undo-tree-id762 . -1) 164) nil (25517 26327 154314 204000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 162) (undo-tree-id761 . -1) 163) nil (25517 26327 154313 444000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -158) (undo-tree-id757 . -1) (#("e" 0 1 (fontified t)) . -159) (undo-tree-id758 . -1) (#("e" 0 1 (fontified t)) . -160) (undo-tree-id759 . -1) (#("n" 0 1 (fontified t)) . -161) (undo-tree-id760 . -1) 162) nil (25517 26327 154312 124000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 157) (undo-tree-id756 . -1) 158) nil (25517 26327 154310 184000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -153) (undo-tree-id752 . -1) (#("a" 0 1 (fontified t)) . -154) (undo-tree-id753 . -1) (#("v" 0 1 (fontified t)) . -155) (undo-tree-id754 . -1) (#("e" 0 1 (fontified t)) . -156) (undo-tree-id755 . -1) 157) nil (25517 26327 154309 374000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 152) (undo-tree-id751 . -1) 153) nil (25517 26327 154306 794000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -147) (undo-tree-id746 . -1) (#("i" 0 1 (fontified t)) . -148) (undo-tree-id747 . -1) (#("l" 0 1 (fontified t)) . -149) (undo-tree-id748 . -1) (#("e" 0 1 (fontified t)) . -150) (undo-tree-id749 . -1) (#("s" 0 1 (fontified t)) . -151) (undo-tree-id750 . -1) 152) nil (25517 26327 154305 744000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 146) (undo-tree-id745 . -1) 147) nil (25517 26327 154303 394000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -143) (undo-tree-id742 . -1) (#("s" 0 1 (fontified t)) . -144) (undo-tree-id743 . -1) (#("s" 0 1 (fontified t)) . -145) (undo-tree-id744 . -1) 146) nil (25517 26327 154302 234000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 142) (undo-tree-id741 . -1) 143) nil (25517 26327 154300 254000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -139) (undo-tree-id738 . -1) (#("n" 0 1 (fontified t)) . -140) (undo-tree-id739 . -1) (#("d" 0 1 (fontified t)) . -141) (undo-tree-id740 . -1) 142) nil (25517 26327 154299 374000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 138) (undo-tree-id737 . -1) 139) nil (25517 26327 154298 244000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -133) (undo-tree-id732 . -1) (#("r" 0 1 (fontified t)) . -134) (undo-tree-id733 . -1) (#("i" 0 1 (fontified t)) . -135) (undo-tree-id734 . -1) (#("p" 0 1 (fontified t)) . -136) (undo-tree-id735 . -1) (#("t" 0 1 (fontified t)) . -137) (undo-tree-id736 . -1) 138) nil (25517 26327 154297 214000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -128) (undo-tree-id727 . -1) (#("a" 0 1 (fontified t)) . -129) (undo-tree-id728 . -1) (#("v" 0 1 (fontified t)) . -130) (undo-tree-id729 . -1) (#("a" 0 1 (fontified t)) . -131) (undo-tree-id730 . -1) (#("s" 0 1 (fontified t)) . -132) (undo-tree-id731 . -1) 133) nil (25517 26327 154294 804000) 0 nil])
([nil nil ((128 . 144)) nil (25517 26327 154292 904000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 143) (undo-tree-id726 . -1) 144) nil (25517 26327 154292 614000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -141) (undo-tree-id724 . -1) (#("t" 0 1 (fontified t)) . -142) (undo-tree-id725 . -1) 143) nil (25517 26327 154291 564000) 0 nil])
([nil nil ((141 . 157)) nil (25517 26327 154290 464000) 0 nil])
([nil nil ((157 . 171)) nil (25517 26327 154290 64000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 170) (undo-tree-id723 . -1) 171) nil (25517 26327 154289 754000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -166) (undo-tree-id719 . -1) (#("n" 0 1 (fontified t)) . -167) (undo-tree-id720 . -1) (#("t" 0 1 (fontified t)) . -168) (undo-tree-id721 . -1) (#("o" 0 1 (fontified t)) . -169) (undo-tree-id722 . -1) 170) nil (25517 26327 154288 994000) 0 nil])
([nil nil ((166 . 177)) nil (25517 26327 154287 424000) 0 nil])
([nil nil ((177 . 191)) nil (25517 26327 154287 274000) 0 nil])
([nil nil ((191 . 195) (#(" " 0 1 (fontified nil)) . 190) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (191 . 192) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 191) (undo-tree-id718 . -2)) nil (25517 26327 154286 904000) 0 nil])
([nil nil ((#("
  " 0 3 (fontified t)) . 190) (undo-tree-id714 . -1) (undo-tree-id715 . -3) 193) nil (25517 26327 154285 564000) 0 nil])
([nil nil ((190 . 195) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 190) (undo-tree-id713 . -2)) nil (25517 26327 154284 724000) 0 nil])
([nil nil ((191 . 193)) nil (25517 26327 154284 44000) 0 nil])
([nil nil ((193 . 214)) nil (25517 26327 154283 784000) 0 nil])
([nil nil ((214 . 232)) nil (25517 26327 154283 364000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 231) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) 232) nil (25517 26327 154283 84000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -226) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("t" 0 1 (fontified t)) . -227) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("h" 0 1 (fontified t)) . -228) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("e" 0 1 (fontified t)) . -229) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#("r" 0 1 (fontified t)) . -230) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) 231) nil (25517 26327 154276 704000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 225) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 226) nil (25517 26327 154240 803000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -222) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("m" 0 1 (fontified t)) . -223) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("e" 0 1 (fontified t)) . -224) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 225) nil (25517 26327 154227 43000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -221) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) 222) nil (25517 26327 154145 102000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 220) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) 221) nil (25517 26327 153816 459000) 0 nil])
([nil nil ((220 . 241)) nil (25517 26327 153791 99000) 0 nil])
([nil nil ((241 . 250)) nil (25517 26327 153790 839000) 0 nil])
([nil nil ((250 . 256) (#(" " 0 1 (fontified nil)) . 249) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (250 . 251) (#("    " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 250) (undo-tree-id252 . -4) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (25517 26327 153789 409000) 0 nil])
([nil nil ((256 . 257) 252) nil (25517 26327 153775 539000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . -253) (#("  " 0 2 (fontified nil)) . 250) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (252 . 253) (t 25517 26327 169623 462000)) nil (25517 26329 954162 331000) 0 nil])
([nil nil ((250 . 253) (t 25517 26329 977646 324000)) nil (25517 26974 79833 399000) 0 nil])
([nil nil ((#("

  " 0 1 (fontified t) 1 4 (fontified t)) . 249) (undo-tree-id813 . -4) (undo-tree-id814 . -2) 253) nil (25517 26974 79832 609000) 0 nil])
([nil nil ((262 . 264) (#("/" 0 1 (fontified nil face (italic) font-lock-multiline t org-emphasis t)) . 262) (255 . 262) (254 . 256) (#("/" 0 1 (fontified nil)) . -254) (249 . 255)) nil (25517 26974 79830 889000) 0 nil])
([nil nil ((249 . 267) (#("Note /public/. " 0 5 (fontified t) 5 13 (fontified t face (italic) font-lock-multiline t org-emphasis t) 13 15 (fontified t)) . 249)) nil (25517 26974 79830 119000) 0 nil])
([nil nil ((251 . 268) (#("  " 0 2 (fontified nil)) . 250) (undo-tree-id812 . -2) (252 . 253) (#("Note /public/. " 0 5 (fontified t) 5 13 (fontified t face (italic) font-lock-multiline t org-emphasis t) 13 15 (fontified t)) . 252)) nil (25517 26974 79829 399000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -266) (undo-tree-id811 . -1) 267) nil (25517 26974 79828 189000) 0 nil])
([nil nil ((266 . 287)) nil (25517 26974 79827 209000) 0 nil])
([nil nil ((287 . 307)) nil (25517 26974 79826 809000) 0 nil])
([nil nil ((307 . 328)) nil (25517 26974 79826 199000) 0 nil])
([nil nil ((328 . 347)) nil (25517 26974 79825 829000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 346) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 347) nil (25517 26974 79825 279000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -345) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) 346) nil (25517 26974 79822 349000) 0 nil])
([nil nil ((345 . 346)) nil (25517 26974 79816 559000) 0 nil])
([nil current ((346 . 349) (#(" " 0 1 (fontified nil)) . 345) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (346 . 347) (#(" " 0 1 (fontified t)) . 346)) nil (25517 26974 79814 49000) 0 nil])
nil
